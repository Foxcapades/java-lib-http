plugins { id "com.jfrog.bintray" version "1.7.1" }

class Wrap {
  Node wrapped;
  Wrap parent;
  Wrap( Node node ) { wrapped = node; }
  Wrap( Node node, Wrap parent ) { this.wrapped = node; this.parent = parent; }
  Wrap contain( node, Map children ) {
    Node c = wrapped.appendNode(node);
    children.forEach({ tag, content -> c.appendNode(tag, content) });
    return new Wrap(c, this)
  };
  Wrap nested( newNode, ... childNodes ) {
    Node appended = wrapped.appendNode(newNode);
    for (def child : childNodes) appended.append(child);
    return new Wrap(appended, this)
  };
  Wrap append( name, value ) { def n = wrapped.appendNode(name, value); return new Wrap(n, this) };
}

def config = [

  organization: [
    title: "Vulpine IO",
    site: "https://github.com/Vulpine-IO",
    slug: "io.vulpine",
    key: "Vulpine-IO"
  ],

  project: [
    group: 'lib',
    name: 'http',
    version: '0.2.1',
    groupKey: 'Vulpine-IO',
    repo: 'http',
    site: 'https://github.com/Vulpine-IO/lib-http',
    vcs: 'https://github.com/Vulpine-IO/lib-http.git',
    tracker: 'https://github.com/Vulpine-IO/lib-http/issues',
    jvm: '1.6'
  ],

  developers: [
    [
      name: "Elizabeth Harper",
      email: "elliefops@gmail.com",
      user: "elliefops",
      site: "https://github.com/EllieFops"
    ]
  ],

  licenses: [
    [
      name: 'Apache License, Version 2.0',
      url: 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    ]
  ]
];

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

group "${config.organization.slug}.${config.project.group}"
version config.project.version

sourceCompatibility = config.project.jvm
targetCompatibility = config.project.jvm

/*
 * JaCoCo Configuration
 */
jacoco {
  toolVersion = "0.7.6.201602180812"
  reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}

/*
 * BinTray Configuration
 */
bintray {
  user = System.getenv('BINTRAY_USER')
  key  = System.getenv('BINTRAY_KEY')
  publications = [ 'maven' ]
  pkg {
    repo = 'maven'
    name = config.project.name
    userOrg = 'vpx'
    licenses = [ 'Apache-2.0' ]
    vcsUrl = config.project.site
    version {
      name = config.project.version
      released = new Date()
      vcsTag = config.project.version
    }
  }
}

repositories {
  mavenCentral()
  maven {
    url 'http://dl.bintray.com/vpx/maven'
  }
}

dependencies {
  compile group: 'io.vulpine.lib', name: 'logging', version: '0.1.1'
}

/*
 * Tasks
 */

task wrapper(type: Wrapper) {
  gradleVersion = '3.0'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task sourceJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadoc(overwrite: true, type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("${project.projectDir}/docs/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourceJar
  archives javadocJar
}

publishing {
  repositories { maven { url "https://api.bintray.com/maven/vpx/maven/${config.project.name}/;publish=1" } }
  publications {
    maven(MavenPublication) {

      from components.java;

      artifact sourceJar
      artifact javadocJar

      pom.withXml {
        { Node project ->

          final Wrap wrap, devs, lics;

          wrap = new Wrap(project)

          wrap.append 'inceptionYear', '2016'

          wrap.contain 'organization', [ name: config.organization.title, url: config.organization.site ]

          devs = wrap.nested 'developers'

          config.developers.forEach {
            dev -> devs.contain 'developer', [ id: dev.user, name: dev.name, email: dev.email ]
          }

          wrap.contain 'issueManagement', [ system: 'Issue Tracker', url: config.project.tracker ]

          wrap.contain 'ciManagement', [ system: 'Travis CI', url: "https://travis-ci.org/${config.project.groupKey}" ]

          wrap.contain(
            'scm',
            [
              connection: "scm:git:${config.project.vcs}",
              developerConnection: "scm:git:${config.project.vcs}",
              tag: 'master',
              url: config.project.site
            ]
          )

          lics = wrap.nested('licenses')

          config.licenses.forEach {
            lic -> lics.contain 'license', [ name: lic.name, url: lic.url, distribution: 'repo' ]
          }

          return project;

        }.call((Node) asNode())
      }
    }
  }
}
